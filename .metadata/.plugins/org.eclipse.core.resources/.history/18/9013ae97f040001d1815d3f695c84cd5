package ar.edu.unlp.info.oo1.ArbolesB;

import ar.edu.unlp.info.oo1.ArbolesB.tp2.ListaEnlazadaGenerica;
import ar.edu.unlp.info.oo1.ArbolesB.tp2.ListaGenerica;

public class ArbolGeneral<T> {
	private T dato;

	private ListaGenerica<ArbolGeneral<T>> hijos = new ListaEnlazadaGenerica<ArbolGeneral<T>>();

	public T getDato() {
		return dato;
	}

	public void setDato(T dato) {
		this.dato = dato;
	}

	public void setHijos(ListaGenerica<ArbolGeneral<T>> hijos) {
		if (hijos==null)
			this.hijos = new ListaEnlazadaGenerica<ArbolGeneral<T>>();
		else
			this.hijos = hijos;
	}

	public ArbolGeneral(T dato) {
		this.dato = dato;
	}

	public ArbolGeneral(T dato, ListaGenerica<ArbolGeneral<T>> hijos) {
		this(dato);
		if (hijos==null)
			this.hijos = new ListaEnlazadaGenerica<ArbolGeneral<T>>();
		else
			this.hijos = hijos;
	}

	public ListaGenerica<ArbolGeneral<T>> getHijos() {
		return this.hijos;
	}

	public void agregarHijo(ArbolGeneral<T> unHijo) {

		this.getHijos().agregarFinal(unHijo);
	}

	public boolean esHoja() {

		return !this.tieneHijos();
	}
	
	public boolean tieneHijos() {
		return !this.hijos.esVacia();
	}
	
	public boolean esVacio() {

		return this.dato == null && !this.tieneHijos();
	}

	

	public void eliminarHijo(ArbolGeneral<T> hijo) {
		if (this.tieneHijos()) {
			ListaGenerica<ArbolGeneral<T>> hijos = this.getHijos();
			if (hijos.incluye(hijo)) 
				hijos.eliminar(hijo);
		}
	}
	
	public ListaGenerica<Integer> numerosImparesMayoresQuePreOrden(ArbolGeneral<Integer> a, Integer n){
		ListaGenerica<Integer> lista = new ListaEnlazadaGenerica<Integer>();
		numerosImparesPreOrden(a,n,lista);
		return null;
	}
	
	private void numerosImparesPreOrden(ArbolGeneral<Integer>a, Integer n, ListaGenerica<Integer> l) {
		if(a.getDato() > n && a.getDato() % 2 != 0) {
			l.agregarFinal(a.getDato());
		}
		ListaGenerica<ArbolGeneral<Integer>> aux = a.getHijos();
		aux.comenzar();
		while(!aux.fin()) {
			numerosImparesPreOrden(aux.proximo(),n,l);
		}
	}
	private void numerosImparesinOrden(ArbolGeneral<Integer>a, Integer n, ListaGenerica<Integer> l) {
		if(a.esHoja()) {
			if(a.getDato() > n && a.getDato() % 2 != 0) {
				l.agregarFinal(a.getDato());
			}
		}
		else {
			if(a.getDato() > n && a.getDato() % 2 != 0) {
				l.agregarFinal(a.getDato());
			}
			ListaGenerica<ArbolGeneral<Integer>> aux =  a.getHijos();
			aux.comenzar();
			while(!aux.fin()) {
				numerosImparesinOrden(aux.proximo(), n, l);
			}
		}
	}
	public 
}
